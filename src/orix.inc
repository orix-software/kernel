
RETURN_BANK_READ_BYTE_FROM_OVERLAY_RAM := $78

NEXT_STACK_BANK := $0418
ORIX_ROUTINES   := $FFE0
MOUSE_JOYSTICK_MANAGEMENT := $291 ; 12 bytes ?
i_o_counter     := $1A ; 1 byte
i_o_save        := $1B ; 3 bytes ?
TRANSITION_RS232:= $1E;  3 bytes

KEYBOARD_COUNTER:=$02A6 ; 4 bytes
VIA_UNKNOWN     :=$028f ; seems tobe a backup of timer  2 bytesTELEMON_ID_BANK   		= $07

ATMOS_ID_BANK     		= $06
ORIX_ID_BANK      		= $05
MONITOR_ID_BANK   		= $04
TELEFORTH_ID_BANK     	= $03
ORIX_MEMORY_DRIVER_ADDRESS:=$400
SWITCH_TO_BANK_ID              :=     $040C
;NEXT_STACK_BANK:=$418
FIXME_PAGE0_0:=$25
ORIX_VECTOR_READ_VALUE_INTO_RAM_OVERLAY:=$411 ; .dsb 3

work_channel  :=$19     ; 1 byte
KBD_UNKNOWN:=$271  ;FIXME

; ORIX_PATH_CURRENT:=$0525  ;FIXME
FUFTRV=$0100; working Buffer 


TELEMON_KEYBOARD_BUFFER_BEGIN    = $C5C4
TELEMON_KEYBOARD_BUFFER_END      = $C680  
TELEMON_ACIA_BUFFER_INPUT_BEGIN  = $C680
TELEMON_ACIA_BUFFER_INPUT_END    = $C800

TELEMON_ACIA_BUFFER_OUTPUT_BEGIN = $C800
TELEMON_ACIA_BUFFER_OUTPUT_END   = $CA00
  
TELEMON_PRINTER_BUFFER_BEGIN     = $CA00
TELEMON_PRINTER_BUFFER_END       = $D200

HISTORY_BUFFER_BEGIN             =  TELEMON_PRINTER_BUFFER_END+1
HISTORY_BUFFER_END               =  TELEMON_PRINTER_BUFFER_END+200

NULL = 0
;#define FILE_OPEN_TABLE $D000 

; #define BUF1   $C100 ; Stratsed buffer

;#define BUFBUF $C080 ; buffers definition
BUFROU:= $C500 ; Routines for buffers gestion


; [IN] RES the string of the path 
; [OUT] A contains the ID of the file ptr. IF A = 0 then there is an error
; [OUT] X contains the ID of the error

ORIX_REGISTER_FILEHANDLE = $00
ORIX_MALLOC_MEMORY       = $03
ORIX_FREE_MEMORY         = $04


PATH_CURRENT_MAX_LEVEL = 4 ; Only in telemon 3.0 number of level, if we add more, we should have to many RAM, if you need to set more level add bytes here : ptr_path_current_low and ptr_path_current_high
MAX_LENGTH_OF_FILES    = 9 ;  We say 8 chars for directory and end of string

MAX_LENGTH_OF_A_COMMAND = 9

MAX_ARGS = 3              ;  Number of possible args in the command line

ORIX_MAX_PATH_LENGTH = MAX_LENGTH_OF_FILES*PATH_CURRENT_MAX_LEVEL+PATH_CURRENT_MAX_LEVEL
; ORIX_MAX_OPEN_FILES    = 2

MAX_LENGTH_BUFEDT     =  ORIX_MAX_PATH_LENGTH+9

ORIX_NUMBER_OF_MALLOC  = 3

ORIX_MALLOC_FREE_FRAGMENT_MAX = 6

ORIX_MALLOC_FREE_TABLE_SIZE  = 3*ORIX_MALLOC_FREE_FRAGMENT_MAX
ORIX_MALLOC_BUSY_TABLE_SIZE  = 6*ORIX_NUMBER_OF_MALLOC

ORIX_MALLOC_MAX_MEM_ADRESS = $B3FF

SIZE_OF_STACK_BANK = 1

BNKOLD:=$40F 

ADDRESS_READ_BETWEEN_BANK:=$15
ADDRESS_VECTOR_FOR_ADIOB:=$17
BNK_TO_SWITCH:=$410

tmp1:=$34
ptr1:=$32

.bss
.org $4c7
FIXME_DUNNO
.res 1
STACK_BANK
.res SIZE_OF_STACK_BANK
READ_BYTE_FROM_OVERLAY_RAM
; this contains a routine length : 20 bytew
.res 20

ERRNO:=$0509 ;ERRNO
; ORIX_CURRENT_PROCESS_FOREGROUND:=$512
.bss
.org $50D
ORIX_CURRENT_PROCESS_FOREGROUND:
.res 1
MEMTOTAL
.res 4 ; Store the length of the RAM in bytes

.bss
.org BUFNOM
.res 14
ORIX_PATH_CURRENT
.res ORIX_MAX_PATH_LENGTH,0

ORIX_MALLOC_FREE_TABLE:
; (adress begin) (adress_end) (size of chunk 16 bit)
ORIX_MALLOC_FREE_BEGIN_LOW_TABLE
.res ORIX_MALLOC_FREE_FRAGMENT_MAX
ORIX_MALLOC_FREE_BEGIN_HIGH_TABLE
.res ORIX_MALLOC_FREE_FRAGMENT_MAX

ORIX_MALLOC_FREE_END_LOW_TABLE
.res ORIX_MALLOC_FREE_FRAGMENT_MAX
ORIX_MALLOC_FREE_END_HIGH_TABLE
.res ORIX_MALLOC_FREE_FRAGMENT_MAX

MEMFREE
ORIX_MALLOC_FREE_SIZE_LOW_TABLE
.res ORIX_MALLOC_FREE_FRAGMENT_MAX
ORIX_MALLOC_FREE_SIZE_HIGH_TABLE
.res ORIX_MALLOC_FREE_FRAGMENT_MAX
.res 2 ; For 32 bits management

ORIX_MALLOC_FREE_TABLE_NUMBER
; it contains the number of free chuncks
.res 1

.bss
; Busy table
ORIX_MALLOC_BUSY_TABLE
ORIX_MALLOC_BUSY_TABLE_BEGIN_LOW
.res ORIX_NUMBER_OF_MALLOC
ORIX_MALLOC_BUSY_TABLE_BEGIN_HIGH
.res ORIX_NUMBER_OF_MALLOC
ORIX_MALLOC_BUSY_TABLE_END_LOW
.res ORIX_NUMBER_OF_MALLOC
ORIX_MALLOC_BUSY_TABLE_END_HIGH
.res ORIX_NUMBER_OF_MALLOC
ORIX_MALLOC_BUSY_TABLE_SIZE_LOW
.res ORIX_NUMBER_OF_MALLOC
ORIX_MALLOC_BUSY_TABLE_SIZE_HIGH
.res ORIX_NUMBER_OF_MALLOC

; We store the PID of the malloc
ORIX_MALLOC_BUSY_TABLE_PID
.res ORIX_NUMBER_OF_MALLOC

ORIX_MALLOC_BUSY_TABLE_NUMBER
.res 1
KERNEL_TMP_XEXEC:
    .res 1